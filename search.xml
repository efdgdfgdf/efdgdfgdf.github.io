<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python期末复习</title>
      <link href="/posts/f1a5/"/>
      <url>/posts/f1a5/</url>
      
        <content type="html"><![CDATA[<h2 id="Python知识点（一）-字符串处理方法"><a href="#Python知识点（一）-字符串处理方法" class="headerlink" title="Python知识点（一）  字符串处理方法"></a>Python知识点（一）  字符串处理方法</h2><blockquote><p>str.lower() 或 str.upper()方法返回字符串的副本，全部字符小写&#x2F;大写。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;AbCdEfGh&quot;</span>.lower() <span class="comment"># 结果为 &quot;abcdefgh&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>str.split(sep&#x3D;None)方法返回一个列表，由str根据sep被分隔的字段组成。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A,B,C&quot;</span>.split(<span class="string">&quot;,&quot;</span>)  <span class="comment"># 结果为 [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>str.strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p></blockquote><p><strong>注意：</strong>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。默认是删除开头或结尾的空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;   Runoob    0090  &quot;</span>.strip()  <span class="comment"># 去除首尾空格  输出结果Runoob    0090</span></span><br></pre></td></tr></table></figure><blockquote><p>str.count(sub)方法返回子串sub在str中出现的次数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;an apple a day&quot;</span>.count(<span class="string">&quot;a&quot;</span>)  <span class="comment"># 结果为 4</span></span><br></pre></td></tr></table></figure><blockquote><p>str.isalnum() 方法检测字符串是否由字母和数字组成。</p></blockquote><p><strong>注意：</strong>如果 string <strong>至少</strong>有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.isalnum()   <span class="comment">#  结果为 True</span></span><br></pre></td></tr></table></figure><blockquote><p>str.replace(old, new)方法返回字符串str副本，所有old字符串都被替换为new字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;python&quot;</span>.replace(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n123.io&quot;</span>)  <span class="comment"># 结果为 &quot;python123.io&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>str.center(width,[fillchar])根据宽度width显示居中字符串，fillchar可选。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;python&quot;</span>.center(<span class="number">20</span>,<span class="string">&quot;=&quot;</span>)  <span class="comment"># 结果为  &#x27;=======python=======&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>str.join(iter)方法将在iter变量除最后元素外每个元素后增加一个str。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;,&quot;</span>.join(<span class="string">&quot;12345&quot;</span>)  <span class="comment"># 输出结果 &quot;1,2,3,4,5&quot; </span></span><br></pre></td></tr></table></figure><blockquote><p>rstrip() 方法将删除 string 字符串末尾的指定字符，默认为空白符，包括空格、换行符、回车符、制表符。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;welcome,&#x27;</span>*<span class="number">3</span>).rstrip(<span class="string">&#x27;,&#x27;</span>)+<span class="string">&#x27;!&#x27;</span>   <span class="comment"># 输出结果  &#x27;welcome,welcome,welcome!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Python知识点（二）-运算符和表达式"><a href="#Python知识点（二）-运算符和表达式" class="headerlink" title="Python知识点（二）  运算符和表达式"></a>Python知识点（二）  运算符和表达式</h2><blockquote><p>“+”运算符不支持不同内置类型的对象之间相加或连接。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>                            <span class="comment">#不支持字符与数字相加，抛出异常</span></span><br><span class="line">TypeError: can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">&quot;int&quot;</span>) to <span class="built_in">str</span></span><br></pre></td></tr></table></figure><blockquote><p>“<em>”运算符 §列表、字符串或元组等类型变量与整数进行“</em>”运算时，表示<strong>对内容进行重复</strong>并返回重复后的新对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">&#x27;a&#x27;</span> * <span class="number">10</span>                    <span class="comment">#字符串重复</span></span><br><span class="line"><span class="string">&#x27;aaaaaaaaaa&#x27;</span></span><br><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] * <span class="number">3</span>                 <span class="comment">#列表重复</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) * <span class="number">3</span>                 <span class="comment">#元组重复</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>“&#x2F;”和“&#x2F;&#x2F;”分别表示除法和整除运算。</p></blockquote><blockquote><p>同一性测试运算符（identity comparison）is用来测试两个对象是否引用同一个地址，如果是则返回True，否则返回False。<strong>如果两个对象引用了同一个对象，二者具有相同的内存地址。</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 3 is 3</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line"> x = [300, 300, 300]</span><br><span class="line"> x[0] is x[1]        #基于值的内存管理，同一个值在内存中只有一份</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line"> x = [1, 2, 3]</span><br><span class="line"> y = [1, 2, 3]</span><br><span class="line"> x is y              #上面形式创建的x和y不是同一个列表对象</span><br><span class="line">False</span><br></pre></td></tr></table></figure><blockquote><p>Python不支持++和–运算符，只是两个连续的加号和减号。</p></blockquote><blockquote><p>and和or具有惰性求值特点，只计算必须计算的表达式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>&gt;<span class="number">5</span> <span class="keyword">or</span> a&gt;<span class="number">3</span>           <span class="comment"># 3&gt;5的值为False，所以需要计算后面表达式</span></span><br><span class="line">NameError: name <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>&lt;<span class="number">5</span> <span class="keyword">or</span> a&gt;<span class="number">3</span>           <span class="comment">#3&lt;5的值为True，不需要计算后面表达式</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Python知识点（三）-常用内置函数"><a href="#Python知识点（三）-常用内置函数" class="headerlink" title="Python知识点（三）  常用内置函数"></a>Python知识点（三）  常用内置函数</h2><ol><li><h5 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h5><blockquote><p>去掉参数最外侧引号并执行余下语句的函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;1+2&quot;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;Hello&quot;)&#x27;</span>)</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure></li><li><p><strong>divmod(x, y)</strong></p><blockquote><p>计算整商和余数，返回元组(x&#x2F;&#x2F;y, x%y)</p></blockquote></li><li><p><strong>range()</strong></p><blockquote><p>语法格式为range([start,] end [, step] )，返回具有惰性求值特点的range对象，其中包含<strong>左闭右开区间</strong>[start,end)内以step为步长的整数。</p></blockquote></li><li><p>*<em>map(func, <em>iterables)</em></em></p><blockquote><p>把一个可调用对象func依次映射到一个或多个可迭代对象的每个元素上，并返回一个可迭代的map对象作为结果，map对象中每个元素是原可迭代对象中元素经过可调用对象func处理后的结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):            <span class="comment">#可以接收2个参数的函数</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(add, <span class="built_in">range</span>(<span class="number">5</span>), <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">10</span>)))  <span class="comment">#把双参数函数映射到两个序列上</span></span><br><span class="line"></span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]  <span class="comment"># 输出结果</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>sorted(key&#x3D;None,reverse&#x3D;False)</strong></p><blockquote><p>返回排序后的列表，参数key用来指定排序规则或依据，参数reverse用来指定升序或降序，默认为升序。</p></blockquote></li><li><p><strong>filter(function or None, iterable)</strong></p><blockquote><p>将一个单参数可调用对象作用到一个可迭代对象上，返回其中使得可调用对象返回值等价于True的那些元素组成的filter对象，如果指定filter()函数第一个参数为None，则返回可迭代对象中等价于True的元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;x41&#x27;</span>, <span class="string">&#x27;?!&#x27;</span>, <span class="string">&#x27;***&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x.isalnum()              <span class="comment">#测试是否为字母或数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">filter</span>(func, seq)                   <span class="comment">#返回filter对象</span></span><br><span class="line">&lt;<span class="built_in">filter</span> <span class="built_in">object</span> at <span class="number">0x000000000305D898</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(func, seq))             <span class="comment">#把filter对象转换为列表</span></span><br><span class="line">[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;x41&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="built_in">str</span>.isalnum, seq))      <span class="comment">#等价的用法</span></span><br><span class="line">[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;x41&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">20</span>))</span><br><span class="line">filterObject = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">1</span>, data)    <span class="comment">#过滤，只留下所有奇数</span></span><br><span class="line"></span><br><span class="line">filterObject</span><br><span class="line">&lt;<span class="built_in">filter</span> <span class="built_in">object</span> at <span class="number">0x000001D602B85828</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> filterObject            <span class="comment">#3以及3之前的元素都访问过了</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(filterObject)           <span class="comment">#现在所有元素都访问过了</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(filterObject)           <span class="comment">#filterObject中不再包含任何元素，因为filter对象具有惰性求值的特点</span></span><br><span class="line">[]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>reduce(function, sequence[, initial])</strong></p><blockquote><p>可以将一个接收2个参数的可调用对象以<strong>迭代累积</strong>的方式从左到右依次作用到一个可迭代对象的所有元素上，并且允许指定一个初始值。在Python 3.x中reduce()不是内置函数，需要从标准库functools中导入再使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">seq = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))     <span class="comment"># 数据</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x+y, seq)  <span class="comment"># 累加并返回结果 输出结果 45</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230116211838466.png" alt="image-20230116211838466"></p></li><li><p><strong>round(number, ndigits&#x3D;None)</strong></p><blockquote><p>对number进行四舍五入，最终结果保留ndigits位小数。</p></blockquote></li><li><p><strong>enumerate()</strong></p><blockquote><p>函数用来枚举可迭代对象中的元素，返回可迭代的enumerate对象，其中每个元素都是包含索引和值的元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">enumerate</span>(<span class="string">&#x27;abcd&#x27;</span>))            <span class="comment">#枚举字符串中的元素</span></span><br><span class="line">[(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>)]</span><br></pre></td></tr></table></figure></li><li><p><strong>bin()、oct()、hex()</strong></p></li></ol><blockquote><p>将**<u>整数</u>**转换为二进制、八进制和十六进制形式。</p></blockquote><ol start="11"><li><p><strong>zip()</strong></p><blockquote><p>函数用来把多个可迭代对象中对应位置上的元素组合到一起，返回一个可迭代的zip对象，其中每个元素都是包含原来的多个可迭代对象对应位置上元素的元组，如同拉拉链一样。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;abcd&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 输出结果  [(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2), (&#x27;c&#x27;, 3)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;,.!&#x27;</span>))  <span class="comment"># 输出结果  [(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;,&#x27;), (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;.&#x27;), (&#x27;3&#x27;, &#x27;c&#x27;, &#x27;!&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到结果列表中的每个成员都是元组类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后注意：</p><blockquote><p>map、filter、enumerate、zip等对象不仅具有惰性求值的特点，还有另外一个特点：访问过的元素不可再次访问。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">range</span>(<span class="number">10</span>))   </span><br><span class="line"><span class="built_in">list</span>(x)</span><br><span class="line">[<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(x)</span><br><span class="line">[]   <span class="comment"># 失效了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="阶段练习"><a href="#阶段练习" class="headerlink" title="阶段练习"></a>阶段练习</h2><p>用户输入一个三位自然数，计算并输出其佰位、十位和个位上的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个三位数：&#x27;</span>))</span><br><span class="line">a, b = <span class="built_in">divmod</span>(x, <span class="number">100</span>)</span><br><span class="line">b, c = <span class="built_in">divmod</span>(b, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个三位数：&#x27;</span>)</span><br><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, x)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种  不限位数</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个n位自然数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(*<span class="built_in">map</span>(<span class="built_in">int</span>, x))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>任意输入三个英文单词，按字典顺序输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;x,y,z=&#x27;</span>)</span><br><span class="line">x, y, z = <span class="built_in">sorted</span>(s.split(<span class="string">&#x27;,&#x27;</span>))   <span class="comment"># 逗号分隔</span></span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python知识点（四）-Python序列"><a href="#Python知识点（四）-Python序列" class="headerlink" title="Python知识点（四）  Python序列"></a>Python知识点（四）  Python序列</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119150122468.png" alt="image-20230119150122468"></p><h3 id="列表增加"><a href="#列表增加" class="headerlink" title="列表增加"></a>列表增加</h3><blockquote><p>使用列表对象的extend()方法可以将另一个可迭代对象的所有元素添加至该列表对象尾部。通过extend()方法来增加列表元素也不改变其内存首地址，属于<strong>原地操作</strong>。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">aList.extend([<span class="number">11</span>,<span class="number">13</span>])</span><br><span class="line">aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">aList.extend((<span class="number">15</span>,<span class="number">17</span>))</span><br><span class="line">aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用列表对象的insert()方法将元素添加至列表的指定位置。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aList.insert(<span class="number">3</span>, <span class="number">6</span>)                <span class="comment">#在下标为3的位置插入元素6</span></span><br><span class="line">aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当使用*运算符将包含列表的列表重复并创建新列表时，并不是复制子列表值，而是复制已有元素的引用。因此，当修改其中一个值时，相应的引用也会被修改。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [[<span class="literal">None</span>] * <span class="number">2</span>] * <span class="number">3</span></span><br><span class="line">x</span><br><span class="line">[[<span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>], [<span class="literal">None</span>, <span class="literal">None</span>]]</span><br><span class="line"></span><br><span class="line">x[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">x</span><br><span class="line">[[<span class="number">5</span>, <span class="literal">None</span>], [<span class="number">5</span>, <span class="literal">None</span>], [<span class="number">5</span>, <span class="literal">None</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h3><blockquote><p>del命令</p><p>pop()方法删除并返回<em>指定位置</em>（默认为最后一个）</p><p>remove()方法删除首次出现的指定元素，如果列表中不存在要删除的元素，则抛出异常。</p><p>注：列表有自动内存管理功能。在删除列表元素时，Python会自动对列表内存进行收缩并移动列表元素以保证所有元素之间没有空隙，增加列表元素时也会自动扩展内存并对元素进行移动以保证元素之间没有空隙。每当插入或删除一个元素之后，该元素位置后面所有元素的索引就都改变了。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正确的删除代码：</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):         <span class="comment">#从后往前删</span></span><br><span class="line">    <span class="keyword">if</span> x[i]==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">del</span> x[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><blockquote><p>切片返回的是浅复制。所谓浅复制，是指生成一个新的列表，并且把原列表中所选元素的引用都复制到新列表中。如果原列表中只包含<strong>整数、实数、复数等基本类型或元组、字符串这样的不可变类型</strong>的数据，一般是没有问题的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">bList = aList[::]                 <span class="comment">#切片，浅复制</span></span><br><span class="line">aList == bList                    <span class="comment">#两个列表的元素完全一样</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">aList <span class="keyword">is</span> bList                    <span class="comment">#但不是同一个对象</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="built_in">id</span>(aList) == <span class="built_in">id</span>(bList)            <span class="comment">#内存地址不一样</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">bList[<span class="number">1</span>] = <span class="number">8</span>                      <span class="comment">#修改其中一个不会影响另一个</span></span><br><span class="line">bList</span><br><span class="line">[<span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>]</span><br><span class="line">aList</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><blockquote><p>如果原列表中包含列表之类的可变数据类型，由于浅复制时只是把子列表的引用复制到新列表中，这样的话修改任何一个都会影响另外一个。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, [<span class="number">5</span>], <span class="number">7</span>]        <span class="comment">#列表aList中包含可变的列表对象</span></span><br><span class="line">bList = aList[:]           <span class="comment">#切片</span></span><br><span class="line">bList[<span class="number">1</span>].append(<span class="number">6</span>)         <span class="comment">#调用子列表的append()方法，这个方法是原地操作的</span></span><br><span class="line"></span><br><span class="line">bList</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">aList                      <span class="comment">#aList受到影响</span></span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>标准库copy中的deepcopy()函数实现深复制。所谓深复制，是指对原列表中的元素进行递归，把所有的值都复制到新列表中，对嵌套的子列表不再是复制引用。新列表和原列表是互相独立，<strong>修改任何一个都不会影响另外一个</strong>。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, [<span class="number">5</span>], <span class="number">7</span>]</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">bList = copy.deepcopy(aList) <span class="comment">#深赋值，递归复制，直到遇到可哈希对象</span></span><br><span class="line">                                 <span class="comment">#aList和bList完全独立，互相不影响</span></span><br><span class="line">aList == bList</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">aList <span class="keyword">is</span> bList</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">bList[<span class="number">1</span>].append(<span class="number">6</span>)           <span class="comment">#修改bList不会影响aList</span></span><br><span class="line">bList</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>]</span><br><span class="line">aList</span><br><span class="line">[<span class="number">3</span>, [<span class="number">5</span>], <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>以下这张图深刻地解释了切片复制的原理：不可变类型数据不影响（指向不同的内存地址），可变类型数据影响（指向相同的内存地址）</p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119162208000.png" alt="image-20230119162208000"></p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><blockquote><p>sort()方法进行原地排序</p><p>sorted()对列表进行排序并返回<u>新列表</u>。</p><p>reverse()方法将元素原地逆序。</p><p>reversed()对列表元素进行逆序排列并返回<u>迭代器</u>对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>]</span><br><span class="line">aList.sort()                          <span class="comment">#默认是升序排序</span></span><br><span class="line">aList.sort(reverse=<span class="literal">True</span>)              <span class="comment">#降序排序</span></span><br><span class="line">aList.sort(key=<span class="keyword">lambda</span> x:<span class="built_in">len</span>(<span class="built_in">str</span>(x)))  <span class="comment">#按转换成字符串的长度排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(aList)                          <span class="comment">#升序排序，默认是按字母的ascii编码顺序</span></span><br><span class="line"><span class="built_in">sorted</span>(aList,reverse=<span class="literal">True</span>)             <span class="comment">#降序排序</span></span><br><span class="line"></span><br><span class="line">aList.reverse()            <span class="comment"># 原地逆序</span></span><br><span class="line"></span><br><span class="line">newList = <span class="built_in">reversed</span>(aList)            <span class="comment">#返回reversed对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> newList:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)                  <span class="comment">#输出结果  17 15 13 11 9 7 6 5 4 3</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="用于序列操作的常用内置函数"><a href="#用于序列操作的常用内置函数" class="headerlink" title="用于序列操作的常用内置函数"></a>用于序列操作的常用内置函数</h3><p>any(iterable)</p><blockquote><p>参数<br>        iterable – 元组或列表<br>返回值<br>        如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。有点类似于或运算（or）</p></blockquote><p>all(iterable)</p><blockquote><p>参数<br>iterable – 元组或列表。<br>返回值<br>如果iterable的所有元素不为0、’’、False或者iterable为空，all(iterable)返回True，否则返回False；</p><p>注意：<strong>空元组、空列表返回值为True</strong>，这里要特别注意。</p></blockquote><p>其他</p><blockquote><p>len(列表)：返回列表中的元素个数</p><p>max(列表)、 min(列表)：返回列表中的最大或最小元素</p><p>sum(列表)：对列表的元素进行求和运算</p><p>zip()函数返回可迭代的zip对象</p><p>enumerate(列表):枚举列表元素，返回枚举对象，其中每个元素为包含下标和值的元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">bList = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">cList = <span class="built_in">zip</span>(aList, bList)         <span class="comment">#返回zip对象</span></span><br><span class="line">cList</span><br><span class="line">&lt;<span class="built_in">zip</span> <span class="built_in">object</span> at <span class="number">0x0000000003728908</span>&gt;</span><br><span class="line"><span class="built_in">list</span>(cList)                       <span class="comment">#把zip对象转换成列表</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">&#x27;abcdef&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;f&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络期末复习</title>
      <link href="/posts/2892/"/>
      <url>/posts/2892/</url>
      
        <content type="html"><![CDATA[<h2 id="第-1-章"><a href="#第-1-章" class="headerlink" title="第 1 章"></a>第 1 章</h2><h2 id="第-2-章-物理层（P53）"><a href="#第-2-章-物理层（P53）" class="headerlink" title="第 2 章  物理层（P53）"></a>第 2 章  物理层（P53）</h2><p>单位为比特</p><h2 id="第-3-章-数据链路层（P74）"><a href="#第-3-章-数据链路层（P74）" class="headerlink" title="第 3 章 数据链路层（P74）"></a>第 3 章 数据链路层（P74）</h2><p>数据链路层的三个基本问题：封装成帧、透明传输、差错检测，单位为帧</p><h2 id="第-4-章-网络层（P110）"><a href="#第-4-章-网络层（P110）" class="headerlink" title="第 4 章 网络层（P110）"></a>第 4 章 网络层（P110）</h2><p>单位为分组</p><h2 id="第-5-章-运输层（P136）"><a href="#第-5-章-运输层（P136）" class="headerlink" title="第 5 章 运输层（P136）"></a>第 5 章 运输层（P136）</h2><p>可靠传输、流量控制、拥塞控制，单位为报文段</p><h3 id="一、运输层的端口号和套接字的意义"><a href="#一、运输层的端口号和套接字的意义" class="headerlink" title="一、运输层的端口号和套接字的意义"></a>一、运输层的端口号和套接字的意义</h3><p>端口是应用层的各种协议进程与运输实体进行层间交互的地点。</p><p>TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，叫作套接字（socket）  （IP地址：端口号）来表示。</p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230005375.png" alt="image-20230114230005375"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230046659.png" alt="image-20230114230046659"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230105768.png" alt="image-20230114230105768"></p><h3 id="二、UDP和TCP的对比"><a href="#二、UDP和TCP的对比" class="headerlink" title="二、UDP和TCP的对比"></a>二、UDP和TCP的对比</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230126356.png" alt="image-20230114230126356"></p><h3 id="三、流量控制"><a href="#三、流量控制" class="headerlink" title="三、流量控制"></a>三、流量控制</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230138781.png" alt="image-20230114230138781"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230150946.png" alt="image-20230114230150946"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230114230204434.png" alt="image-20230114230204434"></p><h3 id="四、可靠传输"><a href="#四、可靠传输" class="headerlink" title="四、可靠传输"></a>四、可靠传输</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115145333407.png" alt="image-20230115145333407"></p><h5 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h5><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115150939273.png" alt="image-20230115150939273"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115151729196.png" alt="image-20230115151729196"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115151757295.png" alt="image-20230115151757295"></p><h5 id="后退N帧协议"><a href="#后退N帧协议" class="headerlink" title="后退N帧协议"></a>后退N帧协议</h5><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115163558383.png" alt="image-20230115163558383"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115162943337.png" alt="image-20230115162943337"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115163450863.png" alt="image-20230115163450863"></p><h5 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h5><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115171035189.png" alt="image-20230115171035189"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230115170847904.png" alt="image-20230115170847904"></p><p>确认号指的是接收方想要接收的报文段的序号。</p><h3 id="五、拥塞控制"><a href="#五、拥塞控制" class="headerlink" title="五、拥塞控制"></a>五、拥塞控制</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119103310461.png" alt="image-20230119103310461"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119112042661.png" alt="image-20230119112042661"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119112131896.png" alt="image-20230119112131896"></p><h3 id="六、TCP的运输连接管理-P134"><a href="#六、TCP的运输连接管理-P134" class="headerlink" title="六、TCP的运输连接管理(P134)"></a>六、TCP的运输连接管理(P134)</h3><blockquote><p>TCP运输连接的三个阶段：</p></blockquote><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119091909624.png" alt="image-20230119091909624"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119092914852.png" alt="image-20230119092914852"></p><h3 id="七、TCP-的三次握手，四次挥手机制"><a href="#七、TCP-的三次握手，四次挥手机制" class="headerlink" title="七、TCP 的三次握手，四次挥手机制"></a>七、TCP 的三次握手，四次挥手机制</h3><blockquote><p>TCP客户端进程主动打开或关闭，TCP服务端进程被动打开（监听）或关闭。</p></blockquote><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119092647193.png" alt="image-20230119092647193"></p><blockquote><p>如上图，二次握手的话，在结尾时客户没有对TCP连接请求进行确认，没有任何回应，导致服务器资源浪费（白白等待着客户发送数据）。</p></blockquote><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119143818139.png" alt="image-20230119143818139"></p><blockquote><p>再如上图，三次握手，如果使用三报文握手，那么B在收到A发送的陈旧的SYN报文段后，就向A发送SYN报文段，选择自己的序号seq&#x3D;y，并确认收到A的SYN报文段，其确认号ack&#x3D;x+1。当A收到B的SYN报文段时，从确认号就可得知不应当理睬这个SYN报文段（因为A现在并没有发送sq&#x3D;x的SYN报文段)。这时，A发送复位报文段。在这个报文段中，RST&#x3D;1，ACK&#x3D;1，其确认号ack&#x3D;y+1。我们注意到，虽然A拒绝了TCP连接的建立（发送了复位报文段），但对B发送的SYN报文段还是确认收到了。</p><p><strong>B收到A的RST报文段后</strong>，就知道不能建立TCP连接，不会等待A发送数据了，就不会白白等待了。</p></blockquote><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119093607814.png" alt="image-20230119093607814"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119093654948.png" alt="image-20230119093654948"></p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119093803247.png" alt="image-20230119093803247"></p><h2 id="第-6-章-应用层"><a href="#第-6-章-应用层" class="headerlink" title="第 6 章 应用层"></a>第 6 章 应用层</h2><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230119102635861.png" alt="image-20230119102635861"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0/"/>
      <url>/posts/0/</url>
      
        <content type="html"><![CDATA[<h2 id="网站开发基础"><a href="#网站开发基础" class="headerlink" title="网站开发基础"></a>网站开发基础</h2><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>域名、服务器、搭建网站环境。</p><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>【1】WordPress（开源建站系统）<br>可用于建造个人博客，企业官网，电商平台<br>特点：傻瓜式、多主题、插件丰富。<br><a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a></p><p>【2】docsify（文档站点生成器）<br>特点：使用简单，可装插件、响应式。<br><a href="https://docsify.js.org/#/">https://docsify.js.org/#/</a></p><p>【3】dumi（文档站点生成器）<br>适合项目、产品的官网<br>特点：使用简单，专为组件开发场景而生<br><a href="https://d.umijs.org/">https://d.umijs.org/</a></p><p>【4】imgcook<br>根据设计稿一键智能生成代码<br>特点：傻瓜式操作，随意修改，AI生成代码<br><a href="https://www.imgcook.com/">https://www.imgcook.com/</a></p><p>【5】ant design landing<br>网站首页生成器<br>特点：模板丰富，可视化编辑网页元素，可一键上传网站，不需要购买服务器、域名等。<br><a href="https://ant-design-landing.gitee.io/index-cn">https://ant-design-landing.gitee.io/index-cn</a></p><p>【6】TX兔小巢<br>产品反馈平台<br>特点：免费，一键生成网站反馈社区<br><a href="https://txc.qq.com/">https://txc.qq.com/</a></p><p>【7】百度统计<br>网站数据统计<br>特点：多场景统计分析，简单易用<br><a href="https://tongji.baidu.com/web/welcome/login">https://tongji.baidu.com/web/welcome/login</a></p><p>【8】Discuz Q<br>PC端开源社区软件<br>特点：开源，功能丰富<br><a href="https://discuz.chat/?categoryId=all&sequence=0">https://discuz.chat/?categoryId=all&amp;sequence=0</a></p><p>【9】tailwindcss</p><p>UI框架，提供现成具体好看的css样式，帮助我们快速构建现代化网站</p><p><a href="https://www.tailwindcss.cn/">https://www.tailwindcss.cn/</a></p><h2 id="班级网站需求分析"><a href="#班级网站需求分析" class="headerlink" title="班级网站需求分析"></a>班级网站需求分析</h2><p>根据调查，必须让同学们有收获，或者说有正反馈，这是能让同学们关注并使用网站的第一步。</p><ol><li>班级简介</li><li>班级通知、布置作业、课程表</li><li>留言板（提建议）</li><li>班级事迹、文体活动</li><li>思想建设</li><li>新鲜事</li><li>友情链接（学校网站、好用的工具）</li><li>学校风光</li><li>设置一个点歌的小插件，最好能听一些付费的歌曲。</li><li>百度搜索功能</li><li>时间显示功能</li><li>计算综测分</li><li>点名统计</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0/"/>
      <url>/posts/0/</url>
      
        <content type="html"><![CDATA[<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="Load-Balancing-负载均衡"><a href="#Load-Balancing-负载均衡" class="headerlink" title="Load Balancing  负载均衡"></a>Load Balancing  负载均衡</h3><p>用来保护Web server，把请求打到应该打到的服务上（现在大厂，网关+RPC）</p><p>当用户登录某一网页时，浏览器通过DNS服务器域名解析后拿到的IP可能是某个Load Balancer的IP地址， 而不是web server的IP地址。用户发送的请求通过Load Balancer 均匀地分发给web server进行处理。</p><p>常见算法：比如round robin（轮询调度）, least connection（最小连接数法）, hashing（哈希散列）等。。。。 </p><p>High Scalability  （高扩展） ：扩容，Load Balancer下添加更多的web server，来服务更多的用户。</p><p>High Availability （高可用）：Load Balancer持续监听每台web server的状态是否OK，确保将用户请求发给状态OK的web server，挂机的web server就拜拜了，保证服务不中断。</p><p>有小伙伴还会问那Load Balancer也挂掉了呢？</p><p>那Load Balancer肯定也有备份的啦，一个 Load balancer 挂掉，或者是 BGP 发布取消，备份的 Load balancer可以马上接管流量，继续进行响应。</p><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230118183913342.png"></p><h3 id="Database-Design-数据库设计"><a href="#Database-Design-数据库设计" class="headerlink" title="Database Design  数据库设计"></a>Database Design  数据库设计</h3><p>一个是设计data model数据模型</p><p>另一个是数据库的选型</p><p>ps：两者互相关联，因为数据库选型的一个重要参数就是数据模型</p><p>eg :  YouTube de metadata  –&gt; mysql、pg</p><p>电商3网站的产品目录，什么鬼东西都有 –&gt; NoSQL (Cassandra. HBase. MongoDB</p><p>等)</p><p>关系型数据库误区，说关系型数据库不能Scalability，大规模化存储数据，听着有点怪怪的，我们学习数据库都有接触到分库分表、docker &amp;&amp; K8s承载数据库集群，现在大厂的还有云数据库等等。。。</p><p>up提到YouTube的分布式MySQL方案（Vitess）倒是不错，可以看看。</p><p>关系型数据库都需要 data partitioning（数据分区、分片） 的方案，都需要选择 partitioning key（设计构造好分区键值）</p><h3 id="Caching-存储中间件（Memcache、Redis）"><a href="#Caching-存储中间件（Memcache、Redis）" class="headerlink" title="Caching 存储中间件（Memcache、Redis）"></a>Caching 存储中间件（Memcache、Redis）</h3><p>memcache是一套分布式的高速缓存系统</p><h3 id="CDN（Content-Delivery-Network内容分发网络）"><a href="#CDN（Content-Delivery-Network内容分发网络）" class="headerlink" title="CDN（Content Delivery Network内容分发网络）"></a>CDN（Content Delivery Network内容分发网络）</h3><p><img src="D:\Savior\Documents\大三\计算机网络\期末复习\image-20230118184031266.png" alt="image-20230118184031266"></p><h3 id="Asynchronous-processing-异步处理"><a href="#Asynchronous-processing-异步处理" class="headerlink" title="Asynchronous processing 异步处理"></a>Asynchronous processing 异步处理</h3><p>先来说说同步处理 (synchronous processing)，如果一个任务是同步处理，那调用者必须等到任务结束，才能继续后面的工作。比如，</p><p>如果一个任务是异步执行的，那么任务的调用者，不用等到任务结束。</p><p>常规解决方案：解耦（MQ）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<!-- 图库 --><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>关于漫威的图片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><!-- 相册 --><div class="gallery">    <div class="fj-gallery " data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""},{"url":"https://s2.loli.net/2023/01/30/pEoxZsuXfDYmWcA.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>兴趣爱好</title>
      <link href="/hobby/index.html"/>
      <url>/hobby/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */  #footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    position: absolute;    width: 100%;    height: 100%;    /* background-color: rgba(0,0,0,.3); */    content: '';    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }  [data-theme=light] #footer::before, [data-theme=light] #page-header:before {    background-color: rgba(0,0,0,.25)!important;    z-index: -3;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 滚动条样式   start  */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: #00a8ff;  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #00a8ff;}/* 滚动条样式   end  *//* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(      -45deg,      #e8d8b9,      #eccec5,      #a3e9eb,      #bdbdf0,      #eec1ea    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite !important;  }  @-webkit-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @-moz-keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }  @keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }    /* 黑夜模式适配 */  [data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;  }    /* 个人信息Follow me按钮 */  #aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;  }/* 个人卡片  头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}/* 头像状态 */.card-info-avatar .author-status-box {  position: absolute;  bottom: 0;  left: calc(100% - 28px);  width: 28px;  height: 28px;  border: 1px solid #d0d7de;  border-radius: 2em;  background-color: #f8f8f8f8;  transition: 0.4s;  overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {  background-color: #222222f2;  border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {  display: flex;  align-items: center;  justify-content: center;  height: 28px;  padding: 0 5px;}.card-info-avatar .author-status-box:hover {  width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {  width: 105px;  margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {  width: 0;  font-size: 12px;  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  transition: 0.4s;}.card-widget .card-info-avatar {  display: inline-block;  position: relative;}/* 公众号关注 Start */[data-theme='light'] #aside-content .card-widget#card-wechat {    background: #22a6b3 !important;}#aside-content .card-widget#card-wechat {    background: var(--card-bg);    display: flex;    justify-content: center;    align-content: center;    padding: 0;    /* cursor: pointer !important; */    border: none;    height: 110px;}/* 如果你设置了aside 的 mobile 为 false，记得放开下面这段注释；   如果你设置了aside 的 mobile 为 true ，不需要改动。 *//* @media screen and (max-width: 768px) {    #aside-content .card-widget#card-wechat {        display: none !important;    }} */@media screen and (min-width: 1300px) {    #aside-content .card-widget {        margin-top: 1rem;    }}#flip-wrapper {    -webkit-perspective: 1000;    perspective: 1000;    position: relative;    width: 235px;    height: 110px;    z-index: 1;}#flip-wrapper:hover #flip-content {    -webkit-transform: rotateY(180deg);    transform: rotateY(180deg);}#flip-content {    width: 100%;    height: 100%;    -webkit-transform-style: preserve-3d;    transform-style: preserve-3d;    transition: cubic-bezier(0, 0, 0, 1.29) 0.3s;}.face {    position: absolute;    width: 100%;    height: 100%;    -webkit-backface-visibility: hidden;    backface-visibility: hidden;    background: url(https://img.zhheo.com/i/2022/08/31/630efc6e3e794.png) center center no-repeat;    background-size: 100%;}.back.face {    display: block;    -webkit-transform: rotateY(180deg);    transform: rotateY(180deg);    box-sizing: border-box;    background: url(https://s2.loli.net/2023/01/30/xFvjDMacqEKVryQ.png) center center no-repeat;    background-size: 100%;}/* 公众号 End *//* 自定义底部  start */#ft {  max-width: 1200px;  margin: 0 auto 12px;  display: flex;  color: rgb(255 255 255 / 80%) !important;  text-align: left;  flex-wrap: wrap;}.ft-item-1,.ft-item-2 {  display: flex;  height: 100%;  padding: 10px 14px;}.ft-item-1 {  flex-direction: column;  flex: 2;}.ft-item-2 {  flex: 1;  flex-direction: column;}.t-top {  display: flex;}.t-top .t-t-l {  display: flex;  flex-direction: column;  flex: 1.4;  margin-right: 10px;}.t-top .t-t-l .bg-ad {  width: 85%;  border-radius: 10px;  padding: 0 10px;  font-size: 15px;}.btn-xz-box {  margin-top: 10px;}.btn-xz {  display: block;  background-color: #3eb8be;  color: var(--btn-color);  text-align: center;  line-height: 2.4;  /* 圆角 */  border-radius: 20px;  margin: 8px 0;  /* cursor: pointer !important; */}.btn-xz:hover {  text-decoration: none !important;}.btn-xz-box:hover .btn-xz {  background-color: #3f93c9;}.t-top .t-t-r {  display: flex;  flex-direction: column;  flex: 1;}.ft-links {  padding: 0 14px;  list-style: none;  margin-top: 0 !important;}.ft-links li a {  font-size: 15px;  display: inline-block !important;  width: 50%;}.ft-links li a:hover {  text-decoration: none !important;  color: #3f93c9 !important;}.ft-item-2 .ft-img-group {  width: 100%;}.ft-t {  font-size: 20px;  margin-bottom: 20px;  line-height: 1;  font-weight: 600;}.t-l-t {  padding-left: 14px;}.ft-item-2 .ft-img-group .img-group-item {  display: inline-block;  width: 18.4%;  margin-right: 14px;  margin-bottom: 6px;}.ft-item-2 .ft-img-group .img-group-item a {  display: inline-block;  width: 100%;  height: 100%;  /* cursor: pointer !important; */}.ft-item-2 .ft-img-group .img-group-item a img {  width: 100%;  max-height: 80px;  /* 圆角 */  border-radius: 10px;}/* 头像悬浮颜色框 */.ft-item-2 .ft-img-group .img-group-item a img:hover {  border: 2px solid #3f93c9;}@media screen and (max-width: 768px) {  .ft-item-1 {      flex-basis: 100% !important;  }  .ft-item-2 {      flex-basis: 100% !important;  }  .t-top .t-t-l .bg-ad {      width: 100%;  }}@media screen and (max-width: 576px) {  .t-top {      flex-wrap: wrap;  }  .t-top .t-t-l {      flex-basis: 100% !important;  }  .t-top .t-t-r {      margin-top: 16px;      flex-basis: 100% !important;  }}/* 自定义底部  End *//* Twikoo 评论样式 */.tk-input .el-textarea__inner {  min-height: 120px !important;}#twikoo .OwO-body {  max-width: 100% !important;}#twikoo .OwO .OwO-body .OwO-items:nth-child(1),#twikoo .OwO .OwO-body .OwO-items:nth-child(4) {  max-height: 360px !important;}#twikoo .OwO-items li[title|=menhera] img {  width: 100% !important;  margin: 5px 10px;}.tk-comment .tk-owo-emotion[alt*=menhera] {  width: 300px !important;}.tk-comment .vemoji[alt|=menhera],.tk-comment .tk-owo-emotion[alt*=menhera] {  max-width: 300px !important;  max-height: 300px !important;  margin: 8px 1px;  display: block !important;}@media screen and (max-width: 768px) {  .tk-comment .vemoji[alt|=menhera], .tk-comment .tk-owo-emotion[alt*=menhera] {      max-width: calc(100% - 30px) !important;      max-height: calc(100% - 30px) !important;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*=menhera] {      max-width: calc(50% - 10px);      box-sizing: border-box;  }  }/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {  content: '输入QQ号会自动获取昵称和头像🐧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {  content: '收到回复将会发送到您的邮箱📧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {  content: '可以通过昵称访问您的网站🔗';}/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {  display: block;}/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {  /* 先隐藏起来 */  display: none;  /* 绝对定位 */  position: absolute;  /* 向上移动60像素 */  top: -60px;  /* 文字强制不换行，防止left:50%导致的文字换行 */  white-space: nowrap;  /* 圆角 */  border-radius: 10px;  /* 距离左边50% */  left: 50%;  /* 然后再向左边挪动自身的一半，即可实现居中 */  transform: translate(-50%);  /* 填充 */  padding: 14px 18px;  background: #444;  color: #fff;}/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {  display: none;  content: '';  position: absolute;  /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。  我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */  border: 12px solid transparent;  border-top-color: #444;  left: 50%;  transform: translate(-50%, -48px);}/* 自定义字体 */@font-face {  font-family: 'tzy';  /* 字体名自定义即可 */  /* src: url('https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/font/ZhuZiAWan.woff2'); */  src: url('https://npm.elemecdn.com/ethan4116-blog/lib/font/ZhuZiAWan.ttf');  /* 字体文件路径 */  font-display: swap;}body,.gitcalendar {  font-family: tzy !important;}/* 局部优化  start */.categoryBar-list {  max-height: 400px;}.clock-row {  overflow: hidden;  text-overflow: ellipsis;}/*3s为加载动画的时间，1为加载动画的次数，ease-in-out为动画效果*/#page-header,#web_bg {  -webkit-animation: imgblur 2s 1 ease-in-out;  animation: imgblur 2s 1 ease-in-out;}@keyframes imgblur {  0% {      filter: blur(5px);  }  100% {      filter: blur(0px);  }}/*适配使用-webkit内核的浏览器 */@-webkit-keyframes imgblur {  0% {      -webkit-filter: blur(5px);  }  100% {      -webkit-filter: blur(0px);  }}.table-wrap img {  margin: .6rem auto .1rem !important;}/* 标签外挂 网站卡片 start */.site-card-group img {  margin: 0 auto .1rem !important;}.site-card-group .info a img {  margin-right: 10px !important;}[data-theme='dark'] .site-card-group .site-card .info .title {  color: #f0f0f0 !important;}[data-theme='dark'] .site-card-group .site-card .info .desc {  color: rgba(255, 255, 255, .7) !important;}.site-card-group .info .desc {  margin-top: 4px !important;}/* 代码块颜色 */figure.highlight pre .addition {  color: #00bf03 !important;}/* 局部优化  end *//* 加载中显示 */.loading-img {  background: url(https://s2.loli.net/2023/01/30/IegHYuMGp5oacSP.jpg) no-repeat center center;  background-size: cover;}/* 评论区魔改 *//* 声名部分变量 */:root {  --cxl2020mc-radius: 7px;  --cxl2020mc-card-border-width: 1px;}/* 浅色模式颜色 */[data-theme=light] {  --cxl2020mc-border-color: #e3e8f7;  --cxl2020mc-card-bg: #fff;  --cxl2020mc-card-border: #e3e8f7;  --style-border-always: 1px solid var(--cxl2020mc-card-border);  --cxl2020mc-blue: #425AEF;}/* 深色模式颜色 */[data-theme=dark] {  --cxl2020mc-border-color: #42444a;  --cxl2020mc-card-bg: #1d1b26;  --cxl2020mc-card-border: #42444a;  --style-border-always: 1px solid var(--cxl2020mc-card-border);  --cxl2020mc-blue: #0084FF;}/* 评论区评论大框 */.twikoo .tk-comments-container>.tk-comment {  /* 内边距 */  padding: 1rem;  /* 圆角 */  border-radius: var(--cxl2020mc-radius);  /* 背景颜色 */  background: var(--cxl2020mc-card-bg);  /* 变动动画时长 */  transition: .3s;}/* 浅色模式评论区评论大框 */[data-theme=light] .twikoo .tk-comments-container>.tk-comment {  /* 阴影 */  box-shadow: var(--card-box-shadow);}/* 浅色模式评论区评论大框阴影悬浮加深 */[data-theme=light] .twikoo .tk-comments-container>.tk-comment:hover {  /* 阴影（浅色模式突出层次感） */  box-shadow: var(--card-hover-box-shadow);}/* 黑暗模式评论区评论大框 */[data-theme=dark] .twikoo .tk-comments-container>.tk-comment {  /* 边框样式 */  border-style: solid;  /* 边框宽度 */  border-width: var(--cxl2020mc-card-border-width);  /* 边框颜色 */  border-color: var(--cxl2020mc-card-border);}/* 设备信息 */.twikoo .tk-extra {  /* 圆角 */  border-radius: var(--cxl2020mc-radius);  /* 背景颜色 */  background: var(--cxl2020mc-card-bg);  /* 内边距 */  padding: 0.4rem;  /* 底边距 */  margin-bottom: 1rem;  /* 变动动画时长 */  transition: .3s;}/* 浅色模式设备信息 */[data-theme=light] .twikoo .tk-extra {  /* 阴影 */  box-shadow: var(--card-box-shadow);}/* 浅色模式设备信息阴影悬浮加深 */[data-theme=light] .twikoo .tk-extra:hover {  /* 阴影 */  box-shadow: var(--card-hover-box-shadow);}/* 黑暗模式设备信息 */[data-theme=dark] .twikoo .tk-extra {  /* 边框样式 */  border-style: solid;  /* 边框宽度 */  border-width: var(--cxl2020mc-card-border-width);  /* 边框颜色 */  border-color: var(--cxl2020mc-card-border);}/* 加载更多按钮 */.twikoo .tk-expand {  /* 圆角 */  border-radius: var(--cxl2020mc-radius);}/* 浅色模式加载更多按钮 */[data-theme=light] .twikoo .tk-expand {  /* 阴影 */  box-shadow: var(--card-box-shadow);}/* 浅色模式加载更多按钮（鼠标悬浮时） */[data-theme=light] .twikoo .tk-expand:hover {  /* 阴影 */  box-shadow: var(--card-hover-box-shadow);  /* 背景颜色 */  background-color: var(--btn-bg);}/* 黑暗模式加载更多按钮（鼠标悬浮时） */[data-theme=dark] .twikoo .tk-expand:hover {  /* 背景颜色 */  background-color: var(--cxl2020mc-blue);}/* 黑暗模式加载更多按钮 */[data-theme=dark] .twikoo .tk-expand {  /* 边框样式 */  border-style: solid;  /* 边框宽度 */  border-width: var(--cxl2020mc-card-border-width);  /* 边框颜色 */  border-color: var(--cxl2020mc-card-border);}/* 评论区魔改 end  *//* 鼠标样式 start*/#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(129, 236, 236);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 鼠标样式 end */]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 10px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 4rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden;  }    .pace-inactive .pace-progress {    opacity: 0;    transition: 0.3s ease-in;  }    .pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    animation: gradient 1.5s ease infinite;    background-size: 200%;  }    .pace.pace-inactive {    opacity: 0;    transition: 0.3s;    top: -8px;  }  @keyframes gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/day.js"/>
      <url>/js/day.js</url>
      
        <content type="html"><![CDATA[var d = new Date();m = d.getMonth() + 1;dd = d.getDate();y = d.getFullYear();// 公祭日if (m == 9 && dd == 18) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是九一八事变" + (y - 1931).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 7) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是卢沟桥事变" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 13) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是南京大屠杀" + (y - 1937).toString() + "周年纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 14) {    document.getElementsByTagName("html")[0].setAttribute("style", "filter: grayscale(60%);");    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今天是世界慰安妇纪念日\n🪔勿忘国耻，振兴中华🪔");        sessionStorage.setItem("isPopupWindow", "1");    }}// 节假日if (m == 10 && dd <= 3) {//国庆节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝祖国" + (y - 1949).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 8 && dd == 15) {//搞来玩的，小日子投降    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("小日子已经投降" + (y - 1945).toString() + "年了😃");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 1 && dd == 1) {//元旦节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年元旦快乐！🎉");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 3 && dd == 8) {//妇女节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位女神们，妇女节快乐！👩");        sessionStorage.setItem("isPopupWindow", "1");    }}l = ["非常抱歉，因为不可控原因，博客将于明天停止运营！", "好消息，日本没了！", "美国垮了，原因竟然是川普！", "微软垮了！", "你的电脑已经过载，建议立即关机！", "你知道吗？站长很喜欢你哦！", "一分钟有61秒哦", "你喜欢的人跟别人跑了！"]if (m == 4 && dd == 1) {//愚人节，随机谎话    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(l[Math.floor(Math.random() * l.length)]);        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 1) {//劳动节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("劳动节快乐\n为各行各业辛勤工作的人们致敬！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 4) {//青年节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("青年节快乐\n青春不是回忆逝去,而是把握现在！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 5 && dd == 20) {//520    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("今年是520情人节\n快和你喜欢的人一起过吧！💑");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 7 && dd == 1) {//建党节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("祝中国共产党" + (y - 1921).toString() + "岁生日快乐！");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 9 && dd == 10) {//教师节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("各位老师们教师节快乐！👩‍🏫");        sessionStorage.setItem("isPopupWindow", "1");    }}if (m == 12 && dd == 25) {//圣诞节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("圣诞节快乐！🎄");        sessionStorage.setItem("isPopupWindow", "1");    }}//传统节日部分if ((y == 2023 && m == 4 && dd == 5) || (y == 2024 && m == 4 && dd == 4) || (y == 2025 && m == 4 && dd == 4)) {//清明节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("清明时节雨纷纷,一束鲜花祭故人💐");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((y == 2023 && m == 12 && dd == 22) || (y == 2024 && m == 12 && dd == 21) || (y == 2025 && m == 12 && dd == 21)) {//冬至    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("冬至快乐\n快吃上一碗热热的汤圆和饺子吧🧆");        sessionStorage.setItem("isPopupWindow", "1");    }}var lunar = calendarFormatter.solar2lunar();//农历采用汉字计算，防止出现闰月导致问题if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初六") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初五") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初四") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初三") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初二") || (lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "初一") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "三十") || (lunar["IMonthCn"] == "腊月" && lunar["IDayCn"] == "廿九")) {    //春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire(y.toString() + "年新年快乐\n🎊祝你心想事成，诸事顺利🎊");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "正月" && lunar["IDayCn"] == "十五")) {    //元宵节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("元宵节快乐\n送你一个大大的灯笼🧅");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "五月" && lunar["IDayCn"] == "初五")) {    //端午节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("端午节快乐\n请你吃一条粽子🍙");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "七月" && lunar["IDayCn"] == "初七")) {    //七夕节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("七夕节快乐\n黄昏后,柳梢头,牛郎织女来碰头");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "八月" && lunar["IDayCn"] == "十五")) {    //中秋节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("中秋节快乐\n请你吃一块月饼🍪");        sessionStorage.setItem("isPopupWindow", "1");    }}if ((lunar["IMonthCn"] == "九月" && lunar["IDayCn"] == "初九")) {    //重阳节    if (sessionStorage.getItem("isPopupWindow") != "1") {        Swal.fire("重阳节快乐\n独在异乡为异客，每逢佳节倍思亲");        sessionStorage.setItem("isPopupWindow", "1");    }}// 切换主题提醒// if (y == 2022 && m == 12 && (dd >= 18 && dd <= 20)) {//     if (sessionStorage.getItem("isPopupWindow") != "1") {//         Swal.fire("网站换成冬日限定主题啦⛄");//         sessionStorage.setItem("isPopupWindow", "1");//     }// }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/custom.js"/>
      <url>/js/custom.js</url>
      
        <content type="html"><![CDATA[// 防抖全局计时器let TT = null;    //time用来控制事件的触发// 防抖函数:fn->逻辑 time->防抖时间function debounce(fn, time) {    if (TT !== null) clearTimeout(TT);    TT = setTimeout(fn, time);}// 复制提醒// document.addEventListener("copy", function () {//     debounce(function () {//         new Vue({//             data: function () {//                 this.$notify({//                     title: "哎嘿！复制成功🍬",//                     message: "若要转载最好保留原文链接哦，给你一个大大的赞！",//                     position: 'top-left',//                     offset: 50,//                     showClose: true,//                     type: "success",//                     duration: 5000//                 });//             }//         })//     }, 300);// })]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/lunar.js"/>
      <url>/js/lunar.js</url>
      
        <content type="html"><![CDATA[var lunarInfo=[19416,19168,42352,21717,53856,55632,91476,22176,39632,21970,19168,42422,42192,53840,119381,46400,54944,44450,38320,84343,18800,42160,46261,27216,27968,109396,11104,38256,21234,18800,25958,54432,59984,28309,23248,11104,100067,37600,116951,51536,54432,120998,46416,22176,107956,9680,37584,53938,43344,46423,27808,46416,86869,19872,42416,83315,21168,43432,59728,27296,44710,43856,19296,43748,42352,21088,62051,55632,23383,22176,38608,19925,19152,42192,54484,53840,54616,46400,46752,103846,38320,18864,43380,42160,45690,27216,27968,44870,43872,38256,19189,18800,25776,29859,59984,27480,23232,43872,38613,37600,51552,55636,54432,55888,30034,22176,43959,9680,37584,51893,43344,46240,47780,44368,21977,19360,42416,86390,21168,43312,31060,27296,44368,23378,19296,42726,42208,53856,60005,54576,23200,30371,38608,19195,19152,42192,118966,53840,54560,56645,46496,22224,21938,18864,42359,42160,43600,111189,27936,44448,84835,37744,18936,18800,25776,92326,59984,27424,108228,43744,41696,53987,51552,54615,54432,55888,23893,22176,42704,21972,21200,43448,43344,46240,46758,44368,21920,43940,42416,21168,45683,26928,29495,27296,44368,84821,19296,42352,21732,53600,59752,54560,55968,92838,22224,19168,43476,41680,53584,62034,54560],solarMonth=[31,28,31,30,31,30,31,31,30,31,30,31],Gan=["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"],Zhi=["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"],Animals=["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"],solarTerm=["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"],sTermInfo=["9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd0b06bdb0722c965ce1cfcc920f","b027097bd097c36b0b6fc9274c91aa","9778397bd19801ec9210c965cc920e","97b6b97bd19801ec95f8c965cc920f","97bd09801d98082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd197c36c9210c9274c91aa","97b6b97bd19801ec95f8c965cc920e","97bd09801d98082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec95f8c965cc920e","97bcf97c3598082c95f8e1cfcc920f","97bd097bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c3598082c95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf97c359801ec95f8c965cc920f","97bd097bd07f595b0b6fc920fb0722","9778397bd097c36b0b6fc9210c8dc2","9778397bd19801ec9210c9274c920e","97b6b97bd19801ec95f8c965cc920f","97bd07f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c920e","97b6b97bd19801ec95f8c965cc920f","97bd07f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c91aa","97b6b97bd19801ec9210c965cc920e","97bd07f1487f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c965cc920e","97bcf7f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b97bd19801ec9210c9274c920e","97bcf7f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c91aa","97b6b97bd197c36c9210c9274c920e","97bcf7f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c8dc2","9778397bd097c36c9210c9274c920e","97b6b7f0e47f531b0723b0b6fb0722","7f0e37f5307f595b0b0bc920fb0722","7f0e397bd097c36b0b6fc9210c8dc2","9778397bd097c36b0b70c9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e37f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc9210c8dc2","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9274c91aa","97b6b7f0e47f531b0723b0787b0721","7f0e27f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c91aa","97b6b7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","9778397bd097c36b0b6fc9210c8dc2","977837f0e37f149b0723b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f5307f595b0b0bc920fb0722","7f0e397bd097c35b0b6fc9210c8dc2","977837f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0721","7f0e37f1487f595b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc9210c8dc2","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd097c35b0b6fc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0787b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0b0bb0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14998082b0723b06bd","7f07e7f0e37f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e397bd07f595b0b0bc920fb0722","977837f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f1487f595b0b0bb0b6fb0722","7f0e37f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e37f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e37f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f1487f531b0b0bb0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0723b06bd","7f07e7f0e47f149b0723b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14998082b0723b06bd","7f07e7f0e37f14998083b0787b0721","7f0e27f0e47f531b0723b0b6fb0722","7f0e37f0e366aa89801eb072297c35","7ec967f0e37f14898082b0723b02d5","7f07e7f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e36665b66aa89801e9808297c35","665f67f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b0721","7f07e7f0e47f531b0723b0b6fb0722","7f0e36665b66a449801e9808297c35","665f67f0e37f14898082b0723b02d5","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e36665b66a449801e9808297c35","665f67f0e37f14898082b072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e26665b66a449801e9808297c35","665f67f0e37f1489801eb072297c35","7ec967f0e37f14998082b0787b06bd","7f07e7f0e47f531b0723b0b6fb0721","7f0e27f1487f531b0b0bb0b6fb0722"],nStr1=["日","一","二","三","四","五","六","七","八","九","十"],nStr2=["初","十","廿","卅"],nStr3=["正","二","三","四","五","六","七","八","九","十","冬","腊"];function lYearDays(b){var f,c=348;for(f=32768;f>8;f>>=1)c+=lunarInfo[b-1900]&f?1:0;return c+leapDays(b)}function leapMonth(b){return 15&lunarInfo[b-1900]}function leapDays(b){return leapMonth(b)?65536&lunarInfo[b-1900]?30:29:0}function monthDays(b,f){return f>12||f<1?-1:lunarInfo[b-1900]&65536>>f?30:29}function solarDays(b,f){if(f>12||f<1)return-1;var c=f-1;return 1===c?b%4==0&&b%100!=0||b%400==0?29:28:solarMonth[c]}function toGanZhiYear(b){var f=(b-3)%10,c=(b-3)%12;return 0===f&&(f=10),0===c&&(c=12),Gan[f-1]+Zhi[c-1]}function toAstro(b,f){return"魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯".substr(2*b-(f<[20,19,21,21,21,22,23,23,23,23,22,22][b-1]?2:0),2)+"座"}function toGanZhi(b){return Gan[b%10]+Zhi[b%12]}function getTerm(b,f){if(b<1900||b>2100)return-1;if(f<1||f>24)return-1;var c=sTermInfo[b-1900],e=[parseInt("0x"+c.substr(0,5)).toString(),parseInt("0x"+c.substr(5,5)).toString(),parseInt("0x"+c.substr(10,5)).toString(),parseInt("0x"+c.substr(15,5)).toString(),parseInt("0x"+c.substr(20,5)).toString(),parseInt("0x"+c.substr(25,5)).toString()],a=[e[0].substr(0,1),e[0].substr(1,2),e[0].substr(3,1),e[0].substr(4,2),e[1].substr(0,1),e[1].substr(1,2),e[1].substr(3,1),e[1].substr(4,2),e[2].substr(0,1),e[2].substr(1,2),e[2].substr(3,1),e[2].substr(4,2),e[3].substr(0,1),e[3].substr(1,2),e[3].substr(3,1),e[3].substr(4,2),e[4].substr(0,1),e[4].substr(1,2),e[4].substr(3,1),e[4].substr(4,2),e[5].substr(0,1),e[5].substr(1,2),e[5].substr(3,1),e[5].substr(4,2)];return parseInt(a[f-1])}function toChinaMonth(b){if(b>12||b<1)return-1;var f=nStr3[b-1];return f+="月"}function toChinaDay(b){var f;switch(b){case 10:f="初十";break;case 20:f="二十";break;case 30:f="三十";break;default:f=nStr2[Math.floor(b/10)],f+=nStr1[b%10]}return f}function getAnimal(b){return Animals[(b-4)%12]}function solar2lunar(b,f,c){if(b<1900||b>2100)return-1;if(1900===b&&1===f&&c<31)return-1;var e,a,r=null,t=0;b=(r=b?new Date(b,parseInt(f)-1,c):new Date).getFullYear(),f=r.getMonth()+1,c=r.getDate();var d=(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate())-Date.UTC(1900,0,31))/864e5;for(e=1900;e<2101&&d>0;e++)d-=t=lYearDays(e);d<0&&(d+=t,e--);var n=new Date,s=!1;n.getFullYear()===b&&n.getMonth()+1===f&&n.getDate()===c&&(s=!0);var u=r.getDay(),o=nStr1[u];0===u&&(u=7);var l=e;a=leapMonth(e);var i=!1;for(e=1;e<13&&d>0;e++)a>0&&e===a+1&&!1===i?(--e,i=!0,t=leapDays(l)):t=monthDays(l,e),!0===i&&e===a+1&&(i=!1),d-=t;0===d&&a>0&&e===a+1&&(i?i=!1:(i=!0,--e)),d<0&&(d+=t,--e);var h=e,D=d+1,g=f-1,v=toGanZhiYear(l),y=getTerm(b,2*f-1),m=getTerm(b,2*f),p=toGanZhi(12*(b-1900)+f+11);c>=y&&(p=toGanZhi(12*(b-1900)+f+12));var M=!1,T=null;y===c&&(M=!0,T=solarTerm[2*f-2]),m===c&&(M=!0,T=solarTerm[2*f-1]);var I=toGanZhi(Date.UTC(b,g,1,0,0,0,0)/864e5+25567+10+c-1),C=toAstro(f,c);return{lYear:l,lMonth:h,lDay:D,Animal:getAnimal(l),IMonthCn:(i?"闰":"")+toChinaMonth(h),IDayCn:toChinaDay(D),cYear:b,cMonth:f,cDay:c,gzYear:v,gzMonth:p,gzDay:I,isToday:s,isLeap:i,nWeek:u,ncWeek:"星期"+o,isTerm:M,Term:T,astro:C}}var calendarFormatter={solar2lunar:function(b,f,c){return solar2lunar(b,f,c)},lunar2solar:function(b,f,c,e){if((e=!!e)&&leapMonth!==f)return-1;if(2100===b&&12===f&&c>1||1900===b&&1===f&&c<31)return-1;var a=monthDays(b,f),r=a;if(e&&(r=leapDays(b,f)),b<1900||b>2100||c>r)return-1;for(var t=0,d=1900;d<b;d++)t+=lYearDays(d);var n=0,s=!1;for(d=1;d<f;d++)n=leapMonth(b),s||n<=d&&n>0&&(t+=leapDays(b),s=!0),t+=monthDays(b,d);e&&(t+=a);var u=Date.UTC(1900,1,30,0,0,0),o=new Date(864e5*(t+c-31)+u);return solar2lunar(o.getUTCFullYear(),o.getUTCMonth()+1,o.getUTCDate())}};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  // 当前时间  now.setTime(now.getTime() + 1000);  var start = new Date("08/01/2022 00:00:00"); // 旅行者1号开始计算的时间  var dis = Math.trunc(23400000000 + ((now - start) / 1000) * 17); // 距离=秒数*速度 记住转换毫秒  var unit = (dis / 149600000).toFixed(6);  // 天文单位  var grt = new Date("01/01/2023 00:00:00");// 网站诞生时间  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9    ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`    : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`),    document.getElementById("workboard") &&    (document.getElementById("workboard").innerHTML = currentTimeHtml);}// 设置重复执行函数，周期1000mssetInterval(() => {  createtime();}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '👻别走嘛，坐下来喝茶鸭~☕';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '🐖想跑！抓到你了吧～';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<p><font color=#0c74d6 size=3 face="黑体"><strong>我喜欢</strong></font></p><!-- Simple example (songid, server, type)  -->    <div id="aplayer-AlYsfOUc" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2882393676" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#3F51B5"    ></div><!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"></script>        <div id="aplayer-rUPzqywr" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":3,"mode":"circulation","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"Mine Mine","author":"周杰伦","url":"https://blog.music1.panghai.top/song/100.mp3","lrc":"/lrc/100.lrc","pic":"https://blog.music1.panghai.top/pic/100.webp"},{"title":"Mojito","author":"周杰伦","url":"https://blog.music1.panghai.top/song/101.mp3","lrc":"/lrc/101.lrc","pic":"https://blog.music1.panghai.top/pic/101.webp"}]};  options.element = document.getElementById("aplayer-rUPzqywr");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script> -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
